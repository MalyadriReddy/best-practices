//
//  SolutionsInteractor.swift
//  CODIUM
//
//  Created by Malyadri on 15/12/19.
//  Copyright (c) 2019 codium. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SolutionsInteractorInterface {
  func getSolutionsResponse(request: Solutions.Request)
  var flow: Flow { get set }
}

class SolutionsInteractor: SolutionsInteractorInterface {
  var presenter: SolutionsPresenterInterface?
  var worker: SolutionsWorker?
  var flow: Flow = .fizzBuzz
  
  func getSolutionsResponse(request: Solutions.Request) {
    var response: String = ""
    switch flow {
    case .fizzBuzz:
      response = fizzBuzzResponse(value: request.value)
    case .leapYear:
      response = checkLeapYear(value: request.value)
    case .leftTriangle:
      response = getLeftTrianglePattern(value: request.value)
    case .rightTriangle:
      response = getRightTrianglePattern(value: request.value)
    case .invertV:
      response = getInvertVPatter(value: request.value)
    case .xPattern:
      response = getXPattern(number: request.value)
    case .diamondPattern:
      response = getDiamondPattern(number: request.value)
    case .lettersPattern:
      response = getLettersPattern(number: request.value)
    case .differenceBtwElseAndFinally:
      response = getDifferenceBetweenElseAndFinally()
    case .primeNumbers:
      response = getPrimeNumbers(range: request.value)
    }
    presenter?.presentSolutionsResponse(response: Solutions.Response(result:response))
  }
  
  private func fizzBuzzResponse(value: Int) -> String {
    var response: String = ""
    for number in 1...value {
      if number % 3 == 0 && number % 5 == 0 {
        response += "FizzBuzz  "
      } else if number % 3 == 0 {
        response += "Fizz  "
      } else if number % 5 == 0 {
        response += "Buzz  "
      } else {
        response += "\(number)  "
      }
    }
    
    return response
  }
  
  private func checkLeapYear(value: Int) -> String {
    var yearResponse: String = "This is not a leapyear"
    if value % 4 == 0 {
        if value % 100 == 0 {
            if value % 400 == 0 {
                yearResponse = "\(value) is a leap year."
            }
            else {
                yearResponse = "\(value) is not a leap year."
            }
        }
        else {
           yearResponse = "\(value) is a leap year."
        }
    }
    else {
        yearResponse = "\(value) is not a leap year."
    }
    return yearResponse
  }
  
  private func getLeftTrianglePattern(value: Int) -> String {
    var leftPatter: String = ""
    for i in 1...value {
      for _ in 1...i {
        print("*", terminator: "")
        leftPatter += "*"
      }
      print("")
        leftPatter += "\n"
    }
    return leftPatter
  }

  private func getRightTrianglePattern(value: Int) -> String {
    var rightPatter: String = ""
    for i in  0..<value{
      for _ in i..<value{
        //  add this string to rightPatter
        print( terminator : " ")
        rightPatter += " "
      }
      for _ in 0...i{
        print("*",terminator : "")
        rightPatter += "*"
      }
      print(" ")
        rightPatter += "\n"
    }
    return rightPatter
  }
  
  private func getInvertVPatter(value: Int) -> String {
    var invertVPatter: String = ""
    for i in 0...value {
      
      for _ in i..<value {
        
        print(terminator : " ")
        invertVPatter += " "
      }
      for j in 0..<i*2 {
        
        if j==1 || j==i*2-1 {
          
          print("*",terminator : " ")
            invertVPatter += "*"
        }
        else {
          
          print(terminator : " ")
            invertVPatter += " "
        }
      }
      print(" ")
        invertVPatter += "\n"
    }
    return invertVPatter
  }
  
  private func getXPattern(number: Int) -> String {
    var xPattern: String = ""
    
    for i in 0..<number {
      for j in 0..<number {
        
        if i==j || j==(number-i-1) {
          print("*",terminator : " ")
            xPattern += "*" + " "
        }
        else {
          print(terminator : " ")
            xPattern += " "
        }
      }
      print("\n")
        xPattern += "\n"
    }
    return xPattern
  }
  
  private func getDiamondPattern(number: Int) -> String {
    var diamonPattern: String = ""
    for i in 1...number {
      for _ in stride(from: number, to: i, by: -1) {
        print(terminator : " ")
        diamonPattern += " "
      }
      for _ in 1...i {
        print("*",terminator : " ")
        diamonPattern += "*" + " "
      }
      print("")
        diamonPattern += "\n"
    }
    for i in stride(from: number, to: 0, by: -1) {
      for _ in stride(from: number, to: i-1, by: -1) {
        print(terminator : " ")
        diamonPattern += " "
      }
      for _ in stride(from: 1, to: i, by: 1){
        print("*",terminator : " ")
        diamonPattern += "*" + " "
      }
      print("")
        diamonPattern += "\n"
    }
    return diamonPattern
  }
  
    private func getLettersPattern(number: Int) -> String {
        var lettersPattern: String = ""
        for i in 0...number {
            for _ in i..<number {
                if i>=1 {
                    print(terminator : "A")
                    lettersPattern += "A"
                }
                else {
                    print(terminator : " ")
                    lettersPattern += " "
                }
            }
            for j in 0..<i*2 {
                if j==1 || j==i*2-1 {
                    
                    print("+",terminator : "")
                    lettersPattern += "+"
                }
                else {
                    if j >= (i-j) {
                        print(terminator : "E")
                        lettersPattern += "E"
                    }
                }
            }
            for _ in number..<number*2-i {
                if i>=1 {
                    print(terminator : "B")
                    lettersPattern += "B"
                }
                else {
                    print(terminator : " ")
                    lettersPattern += " "
                }
            }
            
            print(" ")
            lettersPattern += "\n"
        }
        for i in 0...number {
            
            for j in 0..<i{
                
                if( j==i-1 ){
                    print("+",terminator: "")
                }else{
                    if j != 0 {
                        print("",terminator: "C");
                    }
                }
            }
            
            for j in ((i...(number*2)-i)).reversed() {
                if (j-1)==i && i != 0{
                    
                    if j == number-1 {
                        print("+",terminator: "D")
                        print("")
                    }
                    else if j >= number {
                        print("+",terminator: "D")
                        print("")
                    }
                        
                    else {
                        print("+")
                    }
                }
                else{
                    if i != 0 && i != j {
                        print("E",terminator: "")
                    }
                    else {
                        if i != number && i != 0 {
                            print("", terminator: "C")
                        }
                        
                        if i == number {
                            for k in number+1...number*2-1 {
                                
                                if k > number {
                                    print(terminator : "D")
                                }
                            }
                        }
                    }
                }
            }
        }
        return lettersPattern
    }
  
  private func getDifferenceBetweenElseAndFinally() -> String {
    let difference: String = "The try statement in Python can have an optional finally clause. This clause is executed no matter what, and is generally used to release external resources.In all these circumstances, we must clean up the resource once used, whether it was successful or not. These actions (closing a file, GUI or disconnecting from network) are performed in the finally clause to guarantee execution."
    return difference
  }
  
  // New Function
  private func getPrimeNumbers(range: Int) -> String {
    var numbers = [Int](2 ..< range)
    for i in 0..<range - 2 {
      let prime = numbers[i]
      guard prime > 0 else { continue }
      for multiple in stride(from: 2 * prime - 2, to: range - 2, by: prime){
        numbers[multiple] = 0
      }
      
    }
    
    let filterDate = numbers.filter{ $0 > 0 }
    var primeValue: String = ""
    for data in filterDate {
      primeValue += "\(data) "
    }
    return primeValue
  }
  
}
