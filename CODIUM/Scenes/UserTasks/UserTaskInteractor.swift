//
//  UserTaskInteractor.swift
//  CODIUM
//
//  Created by Malyadri on 13/12/19.
//  Copyright (c) 2019 codium. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol UserTaskInteractorInterface {
  func getUserTaskList(request: UserTask.GetUserTaskList.Request)
  func saveUserTask(request: UserTask.SaveTask.Request)
  func deleteUserTask(request: UserTask.DeleteTask.Request)
}

class UserTaskInteractor: UserTaskInteractorInterface {
  var presenter: UserTaskPresenterInterface?
  var worker: UserTaskWorker!
  
 
  func getUserTaskList(request: UserTask.GetUserTaskList.Request) {
    
    worker.fetchTaskListfromDatabase { result in
      switch result {
      case .success(let data):
        let taskList = data.taskDescription
        self.presenter?.presentUserTaskList(response: UserTask.GetUserTaskList.Response(taskList: taskList))
      default:
        self.presenter?.presentUserTaskList(response: UserTask.GetUserTaskList.Response(taskList: []))
      }
    }
    
  }
  
  func saveUserTask(request: UserTask.SaveTask.Request) {
    guard !request.task.isEmpty else {
      self.presenter?.presentSaveResponse(response: UserTask.SaveTask.Response(success: false))
      return
    }
    
    worker.storeTask(taskDescription: request.task) { result in
      switch result {
      case .success:
        self.presenter?.presentSaveResponse(response: UserTask.SaveTask.Response(success: true))
      default:
        self.presenter?.presentSaveResponse(response: UserTask.SaveTask.Response(success: false))
      }
    }
  }
  
  func deleteUserTask(request: UserTask.DeleteTask.Request) {
    guard !request.task.isEmpty else {
      self.presenter?.presentDeleteTaskResponse(response: UserTask.DeleteTask.Response(success: false))
      return
    }
  
    worker.deleteTask(taskDescription: request.task) { result in
      switch result {
      case .success:
        self.presenter?.presentDeleteTaskResponse(response: UserTask.DeleteTask.Response(success: true))
      default:
        self.presenter?.presentDeleteTaskResponse(response: UserTask.DeleteTask.Response(success: false))
      }
    }
  }

}
